/*----------------------------------------------------
|元音源と観測音源の伝達関数を出力する
|
|mode 1 元音源とその観測音源4種（前後での左右）を解析する
|実行例 -No [解析したいファイルの識別番号] 　-blk[FFT点数] -subMode[1:前後のみ、2：上下のみ、3：前後と上下]
./a.out -No 1 -blk 1024 -mode 1 -subMode 1

|
|mode 2 １つの元音源と１つの観測音源に対して解析を行う
|実行例 -x [元音源のファイル] -y[観測音源のファイル]　-blk[FFT点数]　-txt[出力ファイル名]
./a.out  -x sound/wnoise_sine/wnoise_1110.wav -blk 1024 -mode 2 -y sound/wnoise_sine/wn_mae3_l_1110.wav -txt wn_mae3_l_1110.txt
|
|mode 3　
|実行例 ディレクトリ内の出力したファイルを検索し、グラフ表示する。
|　実行後、mae_r, mae_l, usiro_r, usiro_lの中から１つ選択する。
./a.out -mode 3
|
|
|コンパイル
 gcc  -pg main.c -g pa-misc.c opt.c optck.c setopt.c hpck.c mtime.c fftw.c anacx.c fftw-cx.c winfunc.c -lm -lportaudio -lsndfile -pg -lfftw3
|
+-------------------------------------------------------*/

#include <stdio.h>
#include <sndfile.h>
#include <math.h>
#include "pa-misc.h"
#include<string.h> //strcmp、strncmp関数を使うために必要
#include <stdlib.h>
#include <string.h>
#include "opt.h"
#include <time.h>
#include "mtime.h"
#include "fftw.h"
#include "cvl.h"
#include <sys/types.h>
#include <dirent.h>


//コンパイル
// gcc  -pg main.c -g pa-misc.c opt.c optck.c setopt.c hpck.c mtime.c fftw.c anacx.c fftw-cx.c winfunc.c -lm -lportaudio -lsndfile -pg -lfftw3


//delay用の実行
//./a.out -T 3 -x sound/1104/k3_mae2_l_1106_0.0sdelay.wav -y sound/1104/k3_mae2_l_1106_0.01sdelay.wav -txt 1104_0.01sdelay.txt


// gnuplot
//plot "test.txt" u 1:2 with l
//↑のコマンドで出力する

/*delayの比較
plot "1107_0.002sdelay.txt" u 1:2 w l,"1107_0.005sdelay.txt" u 1:2 w l,"1107_0.002sdelay.txt" u 1:2 w l, "1107_0.001sdelay.txt" u 1:2 with l
gnuplot> plot "1107_0.03sdelay.txt" u 1:2 w l,"1107_0.005sdelay.txt" u 1:2 w l,"1107_0.002sdelay.txt" u 1:2 w l, "1107_0.001sdelay.txt" u 1:2 with l
*/

/*sinの比較
set xlabel '(Hz)' 
set ylabel '(dB)'
plot "sin_usiro.txt" u 1:2 with l,"sin_mae.txt" u 1:2 with l,"sin_ue.txt" u 1:2 with l,"sin_sita.txt" u 1:2 with l,
*/

/*wnoiseの比較
set xlabel '(Hz)' 
set ylabel '(dB)'
plot "wn_usiro.txt" u 1:2 with l,"wn_mae.txt" u 1:2 with l,"wn_ue.txt" u 1:2 with l,"wn_sita.txt" u 1:2 with l,

 */


int blk = 0;
 int N = 0;



///////////////////////////////////////////////////////////////////////////　Hamming_w関数
double Hamming_w(double* out){

  //Hamming窓の処理を加える
  for(int i=0;i < blk; i++){
    out[i] = out[i]*(0.54-0.46*cos(2*M_PI*i/(blk-1)));
    //out[i] = in[i+blk/2*n];
  }
  return 0;
}

/////////////////////////////////////////////////////////////////////　Analysis関数
int Analysis(double* x, double* y, Cmplx* H, double *h){

  FFTW *v1 = fftw_Open(blk);
  FFTW *v2 = fftw_Open(blk);
  FFTW *v3 = fftw_Open(blk);
  double *x_win, *y_win;

  Cmplx *X, *Y;
  
  clock_t start, end, sumC =0;

  x_win = (double*)malloc(sizeof(double)*blk);
  y_win = (double*)malloc(sizeof(double)*blk);
 

  X = (Cmplx*)malloc(sizeof(Cmplx)*blk);
  Y = (Cmplx*)malloc(sizeof(Cmplx)*blk);

  if(x_win == NULL){
    printf("malloc rdata error\n");
    return -1;
  }
  if(y_win == NULL){
    printf("malloc rdata error\n");
    return -1;
  }
 
  if(X == NULL){
    printf("malloc rdata error\n");
    return -1;
  }
  if(Y == NULL){
    printf("malloc rdata error\n");
    return -1;
  }
  
 
  memset(x_win, 0, sizeof(double)*blk);
  memset(y_win, 0, sizeof(double)*blk);
  memset(h, 0, sizeof(double)*blk);
  memset(X, 0, sizeof(Cmplx)*blk);
  memset(Y, 0, sizeof(Cmplx)*blk);
 


  Cmplx *Z;
  Z = (Cmplx*)malloc(sizeof(Cmplx)*blk);
  memset(Z, 0, sizeof(Cmplx)*blk);
  if(Z == NULL){
    printf("malloc rdata error\n");
    return -1;
  }
 
  mtime_start(1);
  start = clock();

  printf("計算開始\n");

  int n =0 ;
   
  for(n; n < 2*N/blk-1; n++){

    memset(x_win, 0, sizeof(double)*blk);
    memset(y_win, 0, sizeof(double)*blk);
    memset(X, 0, sizeof(Cmplx)*blk);
    memset(Y, 0, sizeof(Cmplx)*blk);
    memset(Z, 0, sizeof(Cmplx)*blk);
   
    for(int i=0; i< blk ; i++){
      x_win[i] = x[i+blk/2*n];
      y_win[i] = y[i+blk/2*n];
    }

    Hamming_w(x_win);
    Hamming_w(y_win);
    
    fftw_ExecFwd(v1, x_win, X);
    fftw_ExecFwd(v2, y_win, Y);

    //変更後、追記
    for(int k=0; k<blk; k++){
      Z[k].r = (Y[k].r*X[k].r + Y[k].i*X[k].i)/(X[k].r*X[k].r + X[k].i*X[k].i);

      Z[k].i = (Y[k].i*X[k].r - X[k].i*Y[k].r)/(X[k].r*X[k].r + X[k].i*X[k].i);
    }
    
    for(int k=0; k< blk ; k++){

      // printf("%f   %f\n", Z[k].r, Z[k].i);
     
      H[k].r += Z[k].r;
      H[k].i += Z[k].i;

      //if(OUT[k].r != 0.0 || OUT[k].i != 0.0)printf("%f   %f\n", OUT[k].r, OUT[k].i);
    }
  }
    
  
  end = clock();
  sumC += end-start;
  printf("fft計算時間: %f秒\n", (float)sumC / CLOCKS_PER_SEC);


  //クロススペクトル計算
  for(int k=0; k<blk; k++){
    H[k].r /= n ;

    H[k].i /= n ;
  }


  printf("クロススペクトル計算完了\n");

  fftw_ExecInv(v3, h, H); //IFFT

  printf("伝達関数　計算完了\n");

  fftw_Close(v1);
  fftw_Close(v2);
  fftw_Close(v3);
  free(X);
  free(Y);
  free(Z);

  return 0;
    
}


/////////////////////////////////////////////////////////////////　ls_gnuplot関数
int ls_gnuplot(){

  printf("下記の番号から１つ入力してください\n"
	 "1:mae\n"
	 "2:usiro\n"
	 "3:ue\n"
	 "4:sita\n"
	 "5:IFFT mae\n"
	 "6:IFFT usiro\n"
	 "7:IFFT ue\n"
	 "8:IFFT sita\n"

	 );

  int swtch_Number =0;
  scanf("%d", &swtch_Number);

  char *rl_Name = (char*)malloc(sizeof(char)*7);
  if(rl_Name == NULL){
    printf("malloc rdata error\n");
    return -1;
  }

  //前後の左右きりかえ
  switch(swtch_Number){
  case 1:
    rl_Name = "mae.txt";
    break;
  case 2:
    rl_Name = "usiro.txt";
    break;
  case 3:
    rl_Name = "ue.txt";
    break;
  case 4:
    rl_Name = "sita.txt";
    break;
  case 5:
    rl_Name = "mae.txt";
    break;
  case 6:
    rl_Name = "usiro.txt";
    break;
  case 7:
    rl_Name = "ue.txt";
    break;
  case 8:
    rl_Name = "sita.txt";
    break;
  }
 


  FILE *pipe_pointer= popen("gnuplot -persist", "w");
  fprintf(pipe_pointer, "plot [-100:]");
  printf("plot [-100:]");

  DIR* dp = opendir("./");
  if (dp != NULL){
    struct dirent* de;
    do{
      de = readdir(dp);
      if(de != NULL)
	if(strstr(de->d_name, rl_Name )!= NULL){
	  if(de->d_name[0] != 'I' && swtch_Number <=4 && swtch_Number >= 1){
	    if(strcmp(rl_Name, strstr(de->d_name, rl_Name)) == 0){
	      printf("\"%s\" u 1:2 with l,", de->d_name);
	      fprintf(pipe_pointer, "\"%s\" u 1:2 with l,",de->d_name);
	    }
	  }else if(de->d_name[0] == 'I'&& swtch_Number >= 5 && swtch_Number <= 8){
	    if(strcmp(rl_Name, strstr(de->d_name, rl_Name)) == 0){
	      printf("\"%s\" u 1:2 with l,", de->d_name);
	      fprintf(pipe_pointer, "\"%s\" u 1:2 with l,",de->d_name);
	    }
	  }
	}
    }while(de != NULL);
    closedir(dp);
    fprintf(pipe_pointer, "\n");
    printf("\n");
    fprintf(pipe_pointer, "q\n");
  }else
    printf("error\n");
  pclose(pipe_pointer);
  
  return 0;
}


/////////////////////////////////////////////////////////////////////////////////////////mode2
int mode2(Opt *op){
   SF_INFO sfo,sfo2;
  //オプション（モード２の)の判定 ///
    char *in2FileName = opt_char(op, "-y", "NoMessage" , "観測音源のsoundfile名");
    char *FileName = opt_char(op, "-txt", "NoMessage", "出力するtextファイル名");

    if(in2FileName == "NoMessage") printf("オプション-yの指定がありません。\n");
    if(FileName == "NoMessage"){
      printf("オプション-txtの指定がありません。\n");
      return 0;
    }
    
    //オプション（モード２の）の判定　おわり　/////

    char *inFileName = opt_char(op, "-x", "NoMessage", "ｘの音源ファイル場所"); 

    blk = opt_int(op, "-blk", 0, "ブロック数");
    if(inFileName == "NoMessage") printf("オプション-xの指定がありません。\n");
   
    if(blk == 0) printf("オプション　-blkの指定がありません。\n");
    
    //変数の準備//////
    SNDFILE *isf = sf_open(inFileName, SFM_READ, &sfo);
    if( isf == NULL ){
      fputs( "ｘのファイルオープンに失敗しました。\n", stderr );
      exit( EXIT_FAILURE );
    }
    N = sfo.frames;
    double *x, *y, *h;

    x = (double*)malloc(sizeof(double)*N);
    y = (double*)malloc(sizeof(double)*N);
    h = (double*)malloc(sizeof(double)*blk);
    if(x == NULL){
      printf("malloc rdata error x\n");
      return -1;
    }
    if(y == NULL){
      printf("malloc rdata error y\n");
      return -1;
    }
     if(h == NULL){
      printf("malloc rdata error h\n");
      return -1;
    }
    memset(x, 0, sizeof(double)*N);
    memset(y, 0, sizeof(double)*N);
    memset(h, 0, sizeof(double)*blk);

    Cmplx *H;
    H = (Cmplx*)malloc(sizeof(Cmplx)*blk);

    if(H == NULL){
      printf("malloc rdata error H\n");
      return -1;
    }
    memset(H, 0, sizeof(Cmplx)*blk);
    
    char *IFFT_FileName =(char*) malloc(sizeof(char)*5+strlen(FileName));
    if(IFFT_FileName == NULL){
      printf("malloc rdata error\n");
      return -1;
    }
    sprintf(IFFT_FileName, "IFFT_%s", FileName);
    printf("%s\n", IFFT_FileName);
    
    FILE *text_pointer = fopen(FileName, "w");
    FILE *InXtext_pointer = fopen(IFFT_FileName, "w");
    //FILE *InYtext_pointer = fopen("InY.txt", "w");

    SNDFILE *isf2 = sf_open(in2FileName, SFM_READ, &sfo2);


    if( isf2 == NULL ){
        fputs( "ｙのファイルオープンに失敗しました。\n", stderr );
        exit( EXIT_FAILURE );
    }

    if(sfo.frames == sfo2.frames &&  sfo.channels == sfo2.channels){

      printf("ｘのサンプル数：%ld\n", sfo.frames);
      printf("ｙのサンプル数：%ld\n", sfo2.frames);
      printf("ｘのチャンネル数：%d\n", sfo.channels);
      printf("ｙのチャンネル数：%d\n", sfo2.channels);


    }else{
      printf("ｘのサンプル数：%ld\n", sfo.frames);
      printf("ｙのサンプル数：%ld\n", sfo2.frames);
      printf("ｘのチャンネル数：%d\n", sfo.channels);
      printf("ｙのチャンネル数：%d\n", sfo2.channels);
      printf("サンプル数またはチャンネル数が正しくありません。\n");

      return -1;

    }
   
    FILE *pipe_pointer;
    FILE *InXpipe_pointer;
   
 
    //while(sf_read_double(isf, x, blk) ==NULL && sf_read_double(isf, x, blk) == NULL){

    sf_read_double(isf, x, N);
    sf_read_double(isf2, y, N);

    //解析開始
    Analysis(x, y, H, h);

   
   for(int k=0; k<blk; k++){
     fprintf(text_pointer,"%d %f \n", 44100/blk*k, 10*log10( H[k].r*H[k].r + H[k].i*H[k].i));
     //fprintf(text_pointer,"%d %f \n", k, sqrt( H[k].r*H[k].r + H[k].i*H[k].i));
     //fprintf(text_pointer,"%d %f \n", k,  H[k].r);
    }
  
    for(int k=0; k<blk; k++){
      fprintf(InXtext_pointer,"%d %f \n", k, h[k]/blk);
      //fprintf(InYtext_pointer,"%d %f \n", k, y[k]);
    }
  
 
  printf("計算終了。ただいま出力中\n"); 
  fclose(text_pointer);
  fclose(InXtext_pointer);
  //fclose(InYtext_pointer);
  sf_close(isf2);
 
  
  pipe_pointer = popen("gnuplot -persist", "w");
  fprintf(pipe_pointer, "set xlabel '周波数(Hz)'\n");
  fprintf(pipe_pointer, "set ylabel '音圧レベル(dB)'\n");
  fprintf(pipe_pointer, "plot [-1000:]\"%s\" u 1:2 with l\n",FileName);
  fprintf(pipe_pointer, "q\n");
   

  printf("plot [-100:] \"%s\" u 1:2 with l\n",FileName);
  
  InXpipe_pointer = popen("gnuplot -persist", "w");
  fprintf(InXpipe_pointer, "set xlabel '時間(μsec)'\n");
  fprintf(InXpipe_pointer, "set ylabel '音圧(Pa)'\n");
  fprintf(InXpipe_pointer, "plot [-1000:] \"%s\" u 1:2 with l linetype 3\n ",IFFT_FileName);
  //fprintf(InXpipe_pointer, ", \"%s\" u 1:2 with l linetype 4 \n","InY.txt");
  fprintf(InXpipe_pointer, "q\n");

  // plot "InX.txt" u 1:2 with l linetype 3, "InY.txt" u 1:2 with l linetype 4 
  pclose(pipe_pointer);
  pclose(InXpipe_pointer);
  free(x);
  free(y);
  free(h);
  free(H);
  sf_close(isf);

  return 0;
}

////////////////////////////////////////////////////////////////////////////////////////mode1
int mode1(Opt *op){
  SF_INFO sfo,sfo2;

    //オプション（モード２のみ）のエラー処理
    char *FileCountRange = opt_char(op, "-No", "0", "解析するファイルの番号"); 
    int subMode = opt_int(op, "-subMode", 0, "1:前後のみ、2：上下のみ、3：前後と上下");
    blk = opt_int(op, "-blk", 0, "ブロック数");
    // if(inFileName == "NoMessage") printf("オプション-xの指定がありません。\n");
    if(FileCountRange == "0") printf("オプション-Noの指定がありません。\n");
    if(subMode == 0) printf("オプション-subModeの指定がありません\n");
    if(blk == 0) printf("オプション　-blkの指定がありません。\n");
    
    

  printf("FFT点数　%d\n\n", blk);

  int fileStartCount = 0;
  int fileLastCount = 0;
  int fileCountFlag = 0;
 
  for(int i=0; i< strlen(FileCountRange); i++){
    if(FileCountRange[i] == '-' && fileCountFlag==0) {
      fileCountFlag = 1;
      i++;
    }else if(FileCountRange[i]>= '0'&& FileCountRange[i]<= '9' && fileCountFlag == 0){
      fileStartCount *= 10;
      fileStartCount += FileCountRange[i] - '0';
      
    }

    if(fileCountFlag == 1 && FileCountRange[i]>= '0'&& FileCountRange[i]<= '9'){
      fileLastCount *=10;
      fileLastCount += FileCountRange[i] - '0';
    }

  }

  printf("No%dから", fileStartCount);
  printf("No%dまで\n\n", fileLastCount);
  
  //ここからfileNumberのループ
  for(int fileCounter = fileStartCount; fileCounter<=fileLastCount; fileCounter++){

    int fileCounterDigit = 0;
    int fileCounterDigitSub = 0;
    while(fileCounterDigitSub / 10){
      fileCounterDigitSub /= 10;
      fileCounterDigit ++;
    }

    char *FileNumber = (char*)malloc(sizeof(char)*fileCounterDigit);
    if(FileNumber == NULL){
      printf("malloc rdata error\n");
      return -1;
    }
    sprintf(FileNumber, "%d", fileCounter);

    //ファイルオープン
    char *FileName=(char*) malloc(sizeof(char)*14+strlen(FileNumber));
    if(FileName == NULL){
      printf("malloc rdata error\n");
      return -1;
    }
    char *inFileName = (char*) malloc(sizeof(char)*20+strlen(FileNumber));
    char *in2FileName = (char*) malloc(sizeof(char)*20+strlen(FileNumber));
    char *rl_Name = (char*)malloc(sizeof(char)*7);
    if(rl_Name == NULL){
      printf("malloc rdata error\n");
      return -1;
    }
    char *IFFT_FileName=(char*) malloc(sizeof(char)*17+strlen(FileNumber));
    if(IFFT_FileName == NULL){
      printf("malloc rdata error\n");
      return -1;
    }
    
    FILE *InXtext_pointer ;
    //FILE *InYtext_pointer = fopen("InY.txt", "w");

    SNDFILE *isf;
      /*= sf_open(inFileName, SFM_READ, &sfo);
    if( isf == NULL ){
      fputs( "ｘのファイルオープンに失敗しました。\n", stderr );
      exit( EXIT_FAILURE );
      }*/
    SNDFILE *isf2;
    
    
      FILE *pipe_pointer = popen("gnuplot -persist", "w");
      FILE *InXpipe_pointer = popen("gnuplot -persist", "w");
    

    FILE *text_pointer;

   if(fileStartCount == fileCounter || fileLastCount == fileCounter){
    fprintf(pipe_pointer, "set xlabel '周波数(Hz)'\n");
    fprintf(pipe_pointer, "set ylabel '音圧レベル(dB)'\n");
    fprintf(pipe_pointer, "plot [-1000:]");

    fprintf(InXpipe_pointer, "set xlabel '時間(μsec)'\n");
    fprintf(InXpipe_pointer, "set ylabel '音圧(Pa)'\n");
    fprintf(InXpipe_pointer, "plot [-1000:] ");

   }
    
    int rl_count = 0;
    int rl_last =0;

    switch(subMode){
    case 1:
      rl_count = 1;
      rl_last = 2;
      break;
    case 2:
      rl_count = 3;
      rl_last = 4;
      break;
    case 3:
      rl_count = 1;
      rl_last = 4;
      break;
    }

    //左右きりかえ
    for(rl_count; rl_count <= rl_last; rl_count++){

      //前後上下のきりかえ
      switch(rl_count){
      case 1:
        rl_Name = "mae";
        break;
      case 2:
        rl_Name = "usiro";
        break;
      case 3:
        rl_Name = "ue";
        break;
      case 4:
        rl_Name = "sita";
        break;
      }
      

     
      //音源ファイルの読み込み
      sprintf(inFileName, "sound/k%s_%s_r.wav", FileNumber, rl_Name);
      printf("観測音源のファイル名　%s\n", inFileName);
      isf = sf_open(inFileName, SFM_READ, &sfo);
      if( isf == NULL ){
	fputs( "ｘのファイルオープンに失敗しました。\n", stderr );
	exit( EXIT_FAILURE );
      }
      
      sprintf(in2FileName, "sound/k%s_%s_l.wav", FileNumber, rl_Name);
      printf("観測音源のファイル名　%s\n", in2FileName);
      isf2 = sf_open(in2FileName, SFM_READ, &sfo2);
      if( isf2 == NULL ){
	fputs( "ｙのファイルオープンに失敗しました。\n", stderr );
	exit( EXIT_FAILURE );
      }

      
      if(sfo.frames == sfo2.frames &&  sfo.channels == sfo2.channels){
        printf("ｘのサンプル数：%ld\n", sfo.frames);
        printf("ｙのサンプル数：%ld\n", sfo2.frames);
        printf("ｘのチャンネル数：%d\n", sfo.channels);
        printf("ｙのチャンネル数：%d\n", sfo2.channels);
      }else{
        printf("ｘのサンプル数：%ld\n", sfo.frames);
        printf("ｙのサンプル数：%ld\n", sfo2.frames);
        printf("ｘのチャンネル数：%d\n", sfo.channels);
        printf("ｙのチャンネル数：%d\n", sfo2.channels);
        printf("サンプル数またはチャンネル数が正しくありません。\n");
	      return -1;
      }

      N = sfo.frames;
      
      //変数の準備/////////////////////////////////////////////////
      double *x, *y, *h;

      x = (double*)malloc(sizeof(double)*N);
      y = (double*)malloc(sizeof(double)*N);
      h = (double*)malloc(sizeof(double)*blk);
      if(x == NULL){
        printf("malloc rdata error x\n");
        return -1;
      }
      if(y == NULL){
        printf("malloc rdata error y\n");
        return -1;
      }
      if(h == NULL){
        printf("malloc rdata error h\n");
        return -1;
      }
      memset(x, 0, sizeof(double)*N);
      memset(y, 0, sizeof(double)*N);
      memset(h, 0, sizeof(double)*blk);

      Cmplx *H;
      H = (Cmplx*)malloc(sizeof(Cmplx)*blk);

      if(H == NULL){
        printf("malloc rdata error H\n");
        return -1;
      }
      memset(H, 0, sizeof(Cmplx)*blk);
    

      //出力ファイルの準備
      sprintf(FileName, "o%s_%s.txt", FileNumber, rl_Name);
      printf("出力ファイル名　%s\n", FileName);
      text_pointer = fopen(FileName, "w");

      //IFFTの出力準備
      sprintf(IFFT_FileName, "IFFT%s_%s.txt", FileNumber, rl_Name);
      InXtext_pointer = fopen(IFFT_FileName, "w");

      //音源の読み込み
      sf_read_double(isf, x, N);
      sf_read_double(isf2, y, N);

      //解析開始
      Analysis(x, y, H, h);
    
     printf("計算終了。ただいま出力中\n");
      printf("plot [-1000:] \"%s\" u 1:2 with l\n\n\n\n",FileName);
      
      for(int k=0; k<blk; k++){
        fprintf(text_pointer,"%d %f \n",  44100/blk*k, 10*log10(H[k].r*H[k].r + H[k].i*H[k].i));
        fprintf(InXtext_pointer,"%d %f \n", k, h[k]/blk);
      }
     
     if(fileStartCount == fileCounter || fileLastCount == fileCounter){
      fprintf(pipe_pointer, "\"o%s_%s.txt\" u 1:2 with l,", FileNumber, rl_Name);
      fprintf(InXpipe_pointer, "\"IFFT%s_%s.txt\" u 1:2 with l,", FileNumber, rl_Name);
     }
      free(x);
      free(y);
      free(h);
      free(H);
      sf_close(isf);
      sf_close(isf2);
    }

    if(fileStartCount == fileCounter || fileLastCount == fileCounter){
      fprintf(pipe_pointer, "\n");
      fprintf(pipe_pointer, "q\n");

      fprintf(InXpipe_pointer, "\n");
      fprintf(InXpipe_pointer, "q\n");
    }

    /*↓これ短くできる。　書き込んでいるファイルから文字列で読み込んでそのまま出力すれば分岐いらない*/
    switch(subMode){

    case 1:
      printf("plot [-1000:] \"o%s_mae.txt\" u 1:2 with l, \"o%s_usiro.txt\" u 1:2 with l\n",FileNumber, FileNumber);
      printf("\n");
      printf("plot [-1000:] \"IFFT%s_mae.txt\" u 1:2 with l, \"IFFT%s_usiro.txt\" u 1:2 with l\n",FileNumber, FileNumber);
      break;

    case 2:
      printf("plot [-1000:] \"o%s_ue.txt\" u 1:2 with l, \"o%s_sita_.txt\" u 1:2 with l\n",FileNumber, FileNumber);
      printf("\n");
      printf("plot [-1000:] \"IFFT%s_ue.txt\" u 1:2 with l, \"IFFT%s_sita.txt\" u 1:2 with l\n",FileNumber, FileNumber);
      break;

    case 3:
      printf("plot [-1000:] \"o%s_mae.txt\" u 1:2 with l, \"o%s_usiro.txt\" u 1:2 with l, \"o%s_ue.txt\" u 1:2 with l, \"o%s_sita.txt\" u 1:2 with l\n",FileNumber, FileNumber, FileNumber, FileNumber);
      printf("\n");
      printf("plot [-1000:] \"IFFT%s_mae.txt\" u 1:2 with l, \"IFFT%s_usiro.txt\" u 1:2 with l, \"IFFT%s_ue.txt\" u 1:2 with l, \"IFFT%s_sita.txt\" u 1:2 with l\n",FileNumber, FileNumber, FileNumber, FileNumber);
      
    }

    //free(rl_Name);
    pclose(pipe_pointer);
    pclose(InXpipe_pointer);
    free(in2FileName);
    free(inFileName);
    //free(FileNumber);
    fclose(text_pointer);
    fclose(InXtext_pointer);
    // fclose(InYtext_pointer);


  //fileNumberのループ
  }

 return 0;
}

////////////////////////////////////////////////////　メイン関数
int main (int argc, char *argv[]){
  
  Opt *op =opt_open(argc, argv, argv[0]);
  int mode = opt_int(op, "-mode", 0, "1:解析, 2:単体解析, 3:検索表示, 0:オプション不足");
   if(mode == 0) printf("オプション-modeの指定がありません。\n");
  

  switch(mode){
    case 1:
      mode1(op);
      break;
    case 2:
     mode2(op);
     break;
    case 3:
      ls_gnuplot();
       break;
  }
      
  return 0;

}
